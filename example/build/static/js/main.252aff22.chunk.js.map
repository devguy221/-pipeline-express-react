{"version":3,"sources":["pipeline-express.jpg","../../src/index.js","App.js","index.js"],"names":["module","exports","init","connect","wallet","accounts","item1","console","send","index","paramServer","transServer","buf","Array","myNote","encodedNote","Uint8Array","i","strLen","fetch","params","txn","from","to","amount","parseInt","note","genesisID","genesisHash","type","flatFee","fee","firstRound","lastRound","signedTxn","method","headers","body","blob","response","data","JSON","error","transactionID","AlgoSendButton","returnTo","className","styles","onClick","Pipeline","object","context","AlgoButton","myAlgoWallet","App","props","inputRecipient","event","setState","recipient","target","value","inputAmount","inputNote","state","myAddress","txID","align","alt","src","logo","width","this","onChange","slice","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.252aff22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pipeline-express.c992dc67.jpg\";","import React from 'react'\nimport styles from './styles.module.css'\nimport MyAlgo from '@randlabs/myalgo-connect'\n\nexport class Pipeline {\n  static init() {\n    return new MyAlgo()\n  }\n\n  static async connect(wallet) {\n    try {\n      const accounts = await wallet.connect()\n      let item1 = accounts[0]\n      item1 = item1['address']\n      return item1\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  static async send(address, amt, myNote, sendingAddress, wallet, index = 0) {\n    const algodToken = '0'\n    const paramServer = 'https://algoexplorerapi.io/v2/transactions/params'\n    const transServer = 'https://algoexplorerapi.io/v2/transactions'\n\n    var buf = new Array(myNote.length)\n    var encodedNote = new Uint8Array(buf)\n    for (var i = 0, strLen = myNote.length; i < strLen; i++) {\n      encodedNote[i] = myNote.charCodeAt(i)\n    }\n\n    console.log('My encoded note: ' + encodedNote)\n\n    try {\n      const params = await (await fetch(paramServer)).json()\n\n      let txn = {\n        from: sendingAddress,\n        to: address,\n        amount: parseInt(amt),\n        note: encodedNote,\n        genesisID: 'mainnet-v1.0',\n        genesisHash: 'wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=',\n        type: 'pay',\n        flatFee: true,\n        fee: 1000,\n        firstRound: params['last-round'],\n        lastRound: params['last-round'] + 1000,\n      }\n\n      if (index !== 0) {\n        txn.type = 'axfer'\n        txn.assetIndex = parseInt(index)\n      }\n\n      console.log(txn)\n\n      const signedTxn = await wallet.signTransaction(txn)\n\n      let transactionID = await fetch(transServer, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-binary',\n        },\n        body: signedTxn.blob,\n      })\n        .then(response => response.json())\n        .then(data => {\n          return JSON.stringify(data.txId);\n        })\n        .catch(error => {\n          console.error('Error:', error)\n        })\n\n      return transactionID\n    } catch (err) {\n      console.error(err)\n    }\n  }\n}\n\nexport const AlgoSendButton = ({\n  index,\n  recipient,\n  amount,\n  note,\n  myAddress,\n  wallet,\n  context,\n  returnTo\n}) => {\n  return (\n    <button\n      className={styles.AlgoSendButton}\n      onClick={\n        () => {\n          Pipeline.send(\n            recipient,\n            parseInt(amount),\n            note,\n            myAddress,\n            wallet,\n            index\n          ).then(data => {\n            if (typeof data !== 'undefined') {\n              const object = {}\n              object[returnTo] = data\n              context.setState(object)\n            }\n          })\n        }\n      }\n    >\n      Send\n    </button>\n  )\n}\n\nexport const AlgoButton = ({ wallet, context, returnTo}) => {\n  return (\n    <button\n      className={styles.AlgoButton}\n      onClick={() => {\n        Pipeline.connect(wallet).then(accounts => {\n          const data = {};\n          data[returnTo] = accounts;\n          context.setState(data);\n        })\n      }}\n    >Connect to MyAlgo</button>\n  )\n}\n","import React, {Component} from 'react'\nimport { AlgoButton, AlgoSendButton, Pipeline} from 'pipeline-express-react'\nimport 'pipeline-express-react/dist/index.css'\nimport logo from './pipeline-express.jpg'\n\nconst myAlgoWallet = Pipeline.init();\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      myAddress: \"\",\n      recipient: \"\",\n      amount: 0,\n      note: \"\",\n      txID: \"\"\n    }\n  }\n\n  inputRecipient = (event) => {\n    this.setState({ recipient: event.target.value });\n  }\n\n  inputAmount = (event) => {\n    this.setState({amount: event.target.value});\n  }\n\n  inputNote = (event) => {\n    this.setState({note: event.target.value});\n  }\n  \n  render() {\n    return <div align=\"center\"><img alt=\"Pipeline Express\" src={logo} width=\"300\"></img><br></br>\n      <AlgoButton wallet={myAlgoWallet} context={this} returnTo={\"myAddress\"} />\n      <h3>{\"My Address: \" + this.state.myAddress}</h3>\n      <form >\n        <label>\n          Recipient:\n          <input type=\"text\" onChange={this.inputRecipient} />\n        </label><br></br>\n        <label>\n          Amount:\n          <input type=\"number\" onChange={this.inputAmount} />\n        </label>\n        <label><br></br>\n          Note:\n          <input type=\"text\" onChange={this.inputNote} />\n        </label>\n      </form>\n      <AlgoSendButton\n      index={0} //If ASA, must be a numeric index value !== 0\n      recipient={this.state.recipient} //string value\n      amount={this.state.amount} //integer value in micro Algos\n      note={this.state.note} //string value\n      myAddress={this.state.myAddress} //string value\n      wallet={myAlgoWallet} //reference to an instance of Pipeline.init(); that is called once when the app is initialized\n      context={this}\n      returnTo={\"txID\"}// string value of state key to return the transaction id\n      />\n      <h3>{\"Transaction ID: \" + this.state.txID.slice(1, -1)}</h3>\n</div>\n  }\n}\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}